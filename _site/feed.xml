<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-14T13:06:13-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Status Update #1: 11/11-11/14</title><link href="http://localhost:4000/update/classwork/japanese/2024/11/14/daily-1.html" rel="alternate" type="text/html" title="Status Update #1: 11/11-11/14" /><published>2024-11-14T11:09:02-05:00</published><updated>2024-11-14T11:09:02-05:00</updated><id>http://localhost:4000/update/classwork/japanese/2024/11/14/daily-1</id><content type="html" xml:base="http://localhost:4000/update/classwork/japanese/2024/11/14/daily-1.html"><![CDATA[<p><img src="/_site/assets/blog1_asset1.png" alt="This has a tooltip!" /></p>

<p>Yesterday, I set up this blog using GitHub Pages and Jekyll. Jekyll is a convenient platform for hosting static content since it pairs well with Pages, working ‘out of the box’ by not needing a custom workflow set up to build after changes are committed. It will be nice to centralize just about everything I’m doing in one place. Consider this half devblog and half personal blog for the time being. I’m considering cname’ing this to something other than [https://eawever.github.io/], although I may wait until this site has some more content since this isn’t costing me anything so far. Getting everything up and running required navigating some stuff that I haven’t done in awhile: version control with Git, package installations in Ubuntu, and managing files in a WSL (Windows Subsystem for Linux) terminal.</p>

<h2>Amazon Rekognition</h2>

<p>In parallel, I worked on an interesting lab for my machine learning class, where I explored Amazon Rekognition. This AWS service specializes in image and video analysis, and my task involved creating a custom collection for face recognition. The process began with setting up the SageMaker environment to train the model and create a custom Rekognition collection. Once the collection was ready, I uploaded images and added them to the collection to teach the model about specific individuals. Finally, I tested the system by feeding it a new image and used Rekognition to detect and identify known faces.</p>

<h2>Building an ETL Pipeline with Step Functions</h2>

<p>Another significant project this week was for my Cloud Data Analytics class, where I built an ETL pipeline using AWS Step Functions. The goal was to automate the extraction, transformation, and loading of a large dataset. This pipeline integrated several AWS services: Amazon S3 for data storage, AWS Glue for data transformation and cataloging, and Amazon Athena for querying the processed data.</p>

<p><img src="/_site/assets/step-functions-example.png" alt="This also has a tooltip!" /></p>

<p>AWS Step Functions played a central role in orchestrating the workflow. I configured the state machine to manage each stage, ensuring that data moved seamlessly from S3 to Glue, where it was cleaned and prepared, and then to Athena for analysis. It helped a bit in getting my head around serverless architecture for building data pipelines in AWS.</p>

<h2>Extra bits</h2>

<p>On a different note, I’ve also been working on improving my Japanese. Up until now, about 90% of my learning has been through Duolingo, which has been great for building a foundational vocabulary and getting a feel for basic grammar structures. However, I’m realizing that to truly progress, I need to move beyond just gamified lessons.</p>

<p><img src="/_site/assets/blog1_asset3.jpeg" alt="This additionally has a tooltip." /></p>

<p>Lately, I’ve been watching Japanese videos with Japanese subtitles to get accustomed to native speech patterns and improve my reading skills simultaneously. It’s been challenging but incredibly rewarding when I catch words that I’ve learned. I’m waiting until I learn a little more basic Kanji in my Duolingo lessons to start Anki, but should work that into my routine very soon.</p>]]></content><author><name></name></author><category term="update" /><category term="classwork" /><category term="japanese" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/11/11/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-11-11T18:56:25-05:00</published><updated>2024-11-11T18:56:25-05:00</updated><id>http://localhost:4000/jekyll/update/2024/11/11/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/11/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>